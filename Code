//c# implementation to find the robot's distance from its starting point
//robot's distance will be the minimum amount of units to go back to its starting point
//Rextester.Program.Main is the entry point for your code. Don't change it. --------For testing the code
//Compiler version 4.0.30319.17929 for Microsoft (R) .NET Framework 4.5

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;

namespace Rextester
{
    public class Program
    {
        static void finalPosition(String move)
				{
					int l = move.Length;
					int countF = 0 , countB = 0;
					int countL = 0, countR = 0;
                    //string Position = 0;
					
					// the instruction string 'move'
					for(int i = 0; i < l; i++)
						{
							int n = 0;                                              // for the number of forward and backward movements
							if (move [i] == 'F')
                               //Console.ReadLine(n);
							countF++;
							 
                        else if (move [i] == 'B')
                            //Console.ReadLine(n);
                            countB++;
							 
                        else if (move [i] == 'L')
                                countL++;
							
                        else if (move [i] == 'R')
                                countR++;
						}
						
						//final position of robot after set of movements
               			Console.WriteLine("Final Position: (" + 
                         (countR - countL) + ", " + 
                         (countF - countB) + ")");
                         //Console.WriteLine("Going back in" +   "steps");
						//Console.ReadLine() = Position;
            
            
				}
        static int steps(int source, int step, 
                                int dest) 
    { 
        // base cases 
        if (Math.Abs(source) > (dest))  
            return int.MaxValue; 
      
        if (source == dest)      
            return step; 
  
        // at each point we can go either way 
  
        // if we go on positive side 
        int pos = steps(source + step + 1, 
                        step + 1, dest); 
  
        // if we go on negative side 
        int neg = steps(source - step - 1,  
                        step + 1, dest); 
  
        // minimum of both cases 
        return Math.Min(pos, neg); 
    }
        public static void Main(string[] args)
        {
            //Your code goes here
            String move = "F,R,B,B,L,B,B,B";
            finalPosition(move);
            int dest = 0; 
        Console.WriteLine("No. of steps required"+ 
                             " to reach " + dest +  
                      " is " + steps(0, 0, dest)); 
            Console.WriteLine("Hello, world!");
        }
    }
}
